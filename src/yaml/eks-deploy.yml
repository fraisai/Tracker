name: Deploy to EKS

on:
    push: 
        branches: [ eks ]
    pull_request:
        branches: [ eks ]

jobs:
    eksDeploy:
        runs-on: ubuntu-latest
        name: eks checkout

        steps:
            - name: Set git commit hash # use this hash code to tag image when pushing to ECR repo
            id: commit
            uses: prompt/actions-commit-hash@v2 
            
            - name: Checkout code
            uses: actions/checkout@v3

            - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # context is correct - problem is a github actions glitch - see: https://github.com/github/vscode-github-actions/issues/222
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
                    
            - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v2

            - name: Build image, tag image, and push to ECR repo
            env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }} 
                IMAGE_TAG: ${{ steps.commit.outputs.short }} # use  commit short hash to tag image
            run: |
                echo build image 
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile .
                echo push image to ECR
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            #   run: |
            #     'aws ecr get-login-password --region <> | docker login username AWS --password-stdin <aws_account_id>.dkr.ecr.<region>.amazonaws.com

            - name: Update kube config
            env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
                IMAGE_TAG: ${{ steps.commit.outputs.short }}
            run: |
                bash ../../eks-shell/create-kubeconfig.sh

            - name: Deploy to EKS
            run: |
                bash ../../eks-shell/apply-deployment.sh
                bash ../../eks-shell/apply-service.sh
                bash ../../eks-shell/apply-ingress.sh



# https://www.youtube.com/watch?v=lV6_7mLvJQA


# checkout => configure aws credentials => login in to ECR => build/tag/push docker image to ECR repository => update kube config => deploy to EKS (apply the deployment and service manifests)