apiVersion: api/v1
kind: Deployment
metadata: # labels the actual deployment itself: kubectl delete -l app=tracker-catalog, tier=backend
  name: catalog-deployment
  namespace: catalog_namespace
  labels:
    app: tracker-catalog
    tier: backend
spec:
  replicas: 2
  selector: # used to tell deployment/service which pods with matching labels to apply to 
    matchLabels:
      name: catalog
      type: pods
      component: service
  template:
    metadata:
      labels:
        name: catalog
        type: pods
        component: service 
      spec:
        serviceAccountName: catalog
        containers:
          - name: catalog
            image: 403188442647.dkr.ecr.us-east-2.amazonaws.com/catalog-store
            imagePullPolicy: Always
            ports:
              - name: http
                containerPort: 8001
                protocol: TCP
            livenessProbe:
              httpGet:
                path: /health
                port: 8001
              initialDelaySeconds: 30
              periodSeconds: 3
            readinessProbe:
              httpGet:
                path: /health
                port: 8001
              successThreshold: 3
              periodSeconds: 5
            # resources:
            #   limits:
            #     memory: 512Mi
            #   requests:
            #     cpu: 250m
            #     memory: 512Mi
            # volumeMounts:
            #   - mountPath: /tmp
            #     name: tmp-volume
        # volumes:
        #   - name: tmp-volume
        #     emptyDir:
        #       medium: Memory



# What is done by this deployment file:
#   1. use the container image at the ecr link and run 2 replica Pods
#   2. expose the container on port 8001 named http
#   3. run healthchecks against the /health path
#   4. apply labels to the Pods so that other resources (like the service) can refer to these Pods
